@page "/reporte-clientes"
@inject HttpClient Http
@using Distribuidora_La_Central.Shared.Models
@using Microsoft.Maui.Storage
@using Microsoft.Maui.ApplicationModel
@using Microsoft.Maui.ApplicationModel.DataTransfer

<div class="report-container">
    <div class="report-header">
        <div class="header-content">
            
            <h3 class="report-title">Reporte de Clientes</h3>
        </div>
    </div>

    <div class="report-controls">
        <div class="search-container">
            <input @bind="filtro" placeholder="Buscar cliente..." class="search-input" />
            <span class="search-icon"><i class="fas fa-search"></i></span>
        </div>
        <button class="download-button" @onclick="DescargarPdf">
            <i class="fas fa-file-pdf"></i> Descargar PDF
        </button>
    </div>

    <div class="report-content">
        @if (itemsFiltrados == null)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (itemsFiltrados.Count == 0)
        {
            <div class="no-data">
                <i class="fas fa-database"></i>
                <p>No se encontraron datos.</p>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="data-table">
                    <thead>
                        <tr>
                            @foreach (var prop in typeof(Cliente).GetProperties())
                            {
                                <th>@prop.Name</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in itemsFiltrados)
                        {
                            <tr>
                                @foreach (var prop in typeof(Cliente).GetProperties())
                                {
                                    <td>@prop.GetValue(item)</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

<style>
    /* Estilos base */
    :root {
        --primary-color: #1976d2;
        --primary-dark: #1565c0;
        --primary-light: #e3f2fd;
        --white: #ffffff;
        --light-gray: #f5f5f5;
        --medium-gray: #e0e0e0;
        --dark-gray: #757575;
        --text-color: #212121;
        --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    /* Estructura principal */
    .report-container {
        font-family: 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        color: var(--text-color);
    }

    .report-header {
        background-color: var(--primary-color);
        color: var(--white);
        border-radius: 8px 8px 0 0;
        padding: 15px 20px;
        margin-bottom: 20px;
        box-shadow: var(--shadow);
    }

    .header-content {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .logo {
        height: 40px;
        width: auto;
    }

    .report-title {
        margin: 0;
        font-weight: 500;
        font-size: 1.5rem;
    }

    /* Controles */
    .report-controls {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 20px;
        align-items: center;
    }

    .search-container {
        position: relative;
        flex-grow: 1;
        min-width: 250px;
    }

    .search-input {
        width: 100%;
        padding: 10px 15px 10px 40px;
        border: 1px solid var(--medium-gray);
        border-radius: 4px;
        font-size: 1rem;
        transition: all 0.3s;
    }

        .search-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(25, 118, 210, 0.2);
        }

    .search-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--dark-gray);
    }

    .download-button {
        background-color: var(--primary-color);
        color: var(--white);
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: background-color 0.3s;
    }

        .download-button:hover {
            background-color: var(--primary-dark);
        }

    /* Contenido */
    .report-content {
        background-color: var(--white);
        border-radius: 0 0 8px 8px;
        box-shadow: var(--shadow);
        overflow: hidden;
    }

    /* Tabla */
    .table-responsive {
        overflow-x: auto;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
    }

        .data-table th {
            background-color: var(--primary-light);
            color: var(--primary-dark);
            padding: 12px 15px;
            text-align: left;
            font-weight: 500;
            border-bottom: 2px solid var(--primary-color);
        }

        .data-table td {
            padding: 12px 15px;
            border-bottom: 1px solid var(--medium-gray);
        }

        .data-table tr:hover {
            background-color: var(--light-gray);
        }

    /* Estados */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px;
        gap: 15px;
    }

    .spinner {
        border: 4px solid var(--primary-light);
        border-top: 4px solid var(--primary-color);
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
    }

    .no-data {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px;
        gap: 15px;
        color: var(--dark-gray);
    }

        .no-data i {
            font-size: 2rem;
            color: var(--medium-gray);
        }

    /* Responsive */
    @@media (max-width: 768px) {
        .report-header

    {
        padding: 12px 15px;
    }

    .report-title {
        font-size: 1.3rem;
    }

    .data-table th,
    .data-table td {
        padding: 8px 10px;
        font-size: 0.9rem;
    }

    .search-input,
    .download-button {
        padding: 8px 12px;
    }

    }

    @@media (max-width: 480px) {
        .header-content

    {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }

    .report-controls {
        flex-direction: column;
        align-items: stretch;
    }

    .download-button {
        justify-content: center;
    }

    }

    /* Animaciones */
    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    private List<Cliente> items = new();
    private string filtro = "";

    protected override async Task OnInitializedAsync()
    {
        items = await Http.GetFromJsonAsync<List<Cliente>>("api/Cliente/GetAllClientes");
    }

    private List<Cliente> itemsFiltrados =>
    string.IsNullOrWhiteSpace(filtro)
    ? items
    : items.Where(cliente =>
        cliente.codigoCliente.ToString().Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
        cliente.cedula?.Contains(filtro, StringComparison.OrdinalIgnoreCase) == true ||
        cliente.nombre?.Contains(filtro, StringComparison.OrdinalIgnoreCase) == true ||
        cliente.apellido?.Contains(filtro, StringComparison.OrdinalIgnoreCase) == true ||
        cliente.telefono?.Contains(filtro, StringComparison.OrdinalIgnoreCase) == true ||
        cliente.direccion?.Contains(filtro, StringComparison.OrdinalIgnoreCase) == true
    ).ToList();

    private async Task DescargarPdf()
    {
        try
        {
            // 1. Descargar el PDF desde la API
            var response = await Http.GetAsync("api/Cliente/DescargarReporteClientes");

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine("Error al descargar el PDF: " + response.StatusCode);
                return;
            }

            // 2. Guardar el PDF en la carpeta caché del dispositivo
            var pdfStream = await response.Content.ReadAsStreamAsync();
            var cacheDir = FileSystem.CacheDirectory; // Usa el directorio temporal
            var filePath = Path.Combine(cacheDir, "Reporte_Clientes.pdf");

            using (var fileStream = File.Create(filePath))
            {
                await pdfStream.CopyToAsync(fileStream);
            }

            // 3. Abrir el archivo con la aplicación predeterminada
            await Launcher.Default.OpenAsync(new OpenFileRequest
                {
                    File = new ReadOnlyFile(filePath)
                });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inesperado: {ex.Message}");
            // Opcional: Mostrar alerta al usuario (requiere IJSRuntime en Blazor)
            await JS.InvokeVoidAsync("alert", "No se pudo descargar el PDF");
        }
    }

    [Inject] NavigationManager Navigation { get; set; }
    [Inject] IJSRuntime JS { get; set; }
}