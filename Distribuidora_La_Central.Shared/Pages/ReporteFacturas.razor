@page "/reporte-facturas"
@inject HttpClient Http
@using Distribuidora_La_Central.Shared.Models

<style>
    .facturas-container {
        font-family: 'Roboto', 'Segoe UI', sans-serif;
        max-width: 100%;
        margin: 0 auto;
        padding: 25px;
        background-color: #f8fbfe;
    }

    .facturas-header {
        color: #0d47a1;
        margin-bottom: 30px;
        padding-bottom: 12px;
        border-bottom: 3px solid #1976d2;
        font-size: 2rem;
        font-weight: 600;
        text-align: center;
    }

    .facturas-controls {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 30px;
        align-items: center;
    }

    .facturas-search {
        flex: 1;
        min-width: 300px;
        padding: 14px 20px;
        border: 1px solid #bbdefb;
        border-radius: 8px;
        font-size: 16px;
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        background-color: white;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

        .facturas-search:focus {
            border-color: #1976d2;
            outline: none;
            box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.2);
        }

    .facturas-download {
        background: linear-gradient(135deg, #1976d2, #0d47a1);
        color: white;
        border: none;
        padding: 14px 28px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 500;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 12px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

        .facturas-download:hover {
            background: linear-gradient(135deg, #1565c0, #0b3d91);
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }

    .facturas-table-container {
        overflow-x: auto;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        margin-bottom: 40px;
        border: 1px solid #e3f2fd;
    }

    .facturas-table {
        width: 100%;
        border-collapse: collapse;
        min-width: 800px;
    }

        .facturas-table th {
            background: linear-gradient(to bottom, #1976d2, #1565c0);
            color: white;
            padding: 16px 20px;
            text-align: left;
            position: sticky;
            top: 0;
            font-weight: 500;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
        }

        .facturas-table td {
            padding: 14px 20px;
            border-bottom: 1px solid #e1f5fe;
            color: #263238;
            font-size: 0.95rem;
        }

        .facturas-table tr:nth-child(even) {
            background-color: #f5faff;
        }

        .facturas-table tr:hover {
            background-color: #e3f2fd;
        }

    .facturas-status {
        text-align: center;
        padding: 40px;
        color: #546e7a;
        font-size: 1.1rem;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 3px 10px rgba(0,0,0,0.05);
        margin-top: 30px;
        border: 1px solid #e3f2fd;
    }

    /* Estados especiales para datos */
    .estado-pagado {
        color: #2e7d32;
        font-weight: 500;
    }

    .estado-pendiente {
        color: #d32f2f;
        font-weight: 500;
    }

    @@media (max-width: 1200px) {
        .facturas-container {
            padding: 20px;
        }
    }

    @@media (max-width: 992px) {
        .facturas-header {
            font-size: 1.7rem;
            margin-bottom: 25px;
        }

        .facturas-controls {
            gap: 15px;
        }
    }

    @@media (max-width: 768px) {
        .facturas-controls {
            flex-direction: column;
            align-items: stretch;
        }

        .facturas-search {
            min-width: 100%;
        }

        .facturas-download {
            width: 100%;
            justify-content: center;
        }

        .facturas-table th,
        .facturas-table td {
            padding: 12px 15px;
        }
    }

    @@media (max-width: 576px) {
        .facturas-container {
            padding: 15px;
        }

        .facturas-header {
            font-size: 1.5rem;
            margin-bottom: 20px;
        }

        .facturas-status {
            padding: 30px 20px;
            font-size: 1rem;
        }

        .facturas-table-container {
            border-radius: 8px;
        }

        .facturas-table {
            display: block;
        }

            .facturas-table thead {
                display: none;
            }

            .facturas-table tr {
                display: block;
                margin-bottom: 20px;
                border: 1px solid #bbdefb;
                border-radius: 8px;
                padding: 15px;
            }

            .facturas-table td {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 10px 15px;
                border-bottom: 1px solid #e1f5fe;
            }

                .facturas-table td::before {
                    content: attr(data-label);
                    font-weight: 600;
                    margin-right: 20px;
                    color: #1976d2;
                    flex: 0 0 150px;
                    text-transform: capitalize;
                }
    }

    @@media (max-width: 400px) {
        .facturas-table td::before {
            flex: 0 0 120px;
        }
    }
</style>

<div class="facturas-container">
    <h3 class="facturas-header">Reporte de Facturas</h3>

    <div class="facturas-controls">
        <input @bind="filtro" placeholder="Buscar por código, cliente, estado..." class="facturas-search" />
        <button class="facturas-download" @onclick="DescargarPdf">
            <i class="fas fa-file-pdf"></i> Descargar PDF
        </button>
    </div>

    @if (itemsFiltrados == null)
    {
        <div class="facturas-status">
            <p><i class="fas fa-spinner fa-spin"></i> Cargando datos...</p>
        </div>
    }
    else if (itemsFiltrados.Count == 0)
    {
        <div class="facturas-status">
            <p><i class="fas fa-info-circle"></i> No se encontraron datos.</p>
        </div>
    }
    else
    {
        <div class="facturas-table-container">
            <table class="facturas-table">
                <thead>
                    <tr>
                        @foreach (var prop in typeof(Factura).GetProperties())
                        {
                            <th>@prop.Name</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in itemsFiltrados)
                    {
                        <tr>
                            @foreach (var prop in typeof(Factura).GetProperties())
                            {
                                <td data-label="@prop.Name" class="@((prop.Name == "estado") ? "estado-" + item.estado.ToLower() : "")">
                                    @prop.GetValue(item)
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Factura> items = new();
    private string filtro = "";

    protected override async Task OnInitializedAsync()
    {
        items = await Http.GetFromJsonAsync<List<Factura>>("api/Factura/GetAllFacturas");
    }

    private List<Factura> itemsFiltrados =>
    string.IsNullOrWhiteSpace(filtro)
    ? items
    : items.Where(x => x.codigoFactura.ToString().Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
                      x.codigoCliente.ToString().Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
                      x.fecha.ToString().Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
                      x.totalFactura.ToString().Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
                      x.saldo.ToString().Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
                      x.tipo.Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
                      x.estado.Contains(filtro, StringComparison.OrdinalIgnoreCase)).ToList();

    private async Task DescargarPdf()
    {
        var url = Navigation.ToAbsoluteUri("/api/Factura/DescargarReporteFacturas").ToString();
        await JS.InvokeVoidAsync("open", url, "_blank");
    }

    [Inject] NavigationManager Navigation { get; set; }
    [Inject] IJSRuntime JS { get; set; }
}