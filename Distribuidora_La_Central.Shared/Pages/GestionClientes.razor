@page "/gestionclientes"
@inject HttpClient Http

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<div class="gestor-clientes">
    <h3 class="titulo-principal">Gestión de Clientes</h3>

    <div class="contenedor-principal">
        <!-- Formulario de cliente -->
        <div class="panel-formulario">
            <div class="encabezado-panel">
                <h4>@(modoEditar ? "Editar Cliente" : "Nuevo Cliente")</h4>
            </div>

            <div class="formulario">
                <div class="form-grid">
                    <div class="grupo-formulario">
                        <label>Nombre:</label>
                        <input type="text" @bind="nuevoCliente.nombre" placeholder="Nombre del cliente" />
                    </div>

                    <div class="grupo-formulario">
                        <label>Apellido:</label>
                        <input type="text" @bind="nuevoCliente.apellido" placeholder="Apellido del cliente" />
                    </div>

                    <div class="grupo-formulario">
                        <label>Cédula:</label>
                        <input type="text" @bind="nuevoCliente.cedula" placeholder="Número de cédula" />
                    </div>

                    <div class="grupo-formulario">
                        <label>Tipo de Cliente:</label>
                        <select @bind="nuevoCliente.tipoCliente">
                            <option value="">Seleccione tipo</option>
                            <option value="Regular">Regular</option>
                            <option value="VIP">VIP</option>
                            <option value="Mayorista">Mayorista</option>
                        </select>
                    </div>

                    <div class="grupo-formulario">
                        <label>Teléfono:</label>
                        <input type="text" @bind="nuevoCliente.telefono" placeholder="Número de teléfono" />
                    </div>

                    <div class="grupo-formulario">
                        <label>Dirección:</label>
                        <input type="text" @bind="nuevoCliente.direccion" placeholder="Dirección completa" />
                    </div>

                    <div class="grupo-formulario">
                        <label>Creado por (ID usuario):</label>
                        <input type="number" @bind="nuevoCliente.creado_por" placeholder="ID del usuario" />
                    </div>
                </div>

                <div class="acciones-formulario">
                    <button class="btn-guardar" @onclick="GuardarCliente">
                        <i class="icono-guardar"></i> @(modoEditar ? "Actualizar" : "Guardar")
                    </button>
                    @if (modoEditar)
                    {
                        <button class="btn-cancelar" @onclick="CancelarEdicion">
                            <i class="icono-cancelar"></i> Cancelar
                        </button>
                    }
                </div>
            </div>
        </div>

        <!-- Lista de clientes -->
        <div class="panel-lista">
            <div class="encabezado-panel">
                <h4>Lista de Clientes</h4>
                <div class="busqueda">
                    <input type="text" placeholder="Buscar clientes..." @bind="filtroBusqueda"
                           @oninput="(e) => { filtroBusqueda = e.Value.ToString(); FiltrarClientes(); }" />
                    <i class="icono-buscar"></i>
                </div>
            </div>

            <div class="contenedor-tabla">
                @if (clientesFiltrados?.Any() == true)
                {
                    <table>
                        <thead>
                            <tr>
                                <th>Código</th>
                                <th>Nombre</th>
                                <th>Apellido</th>
                                <th>Cédula</th>
                                <th>Tipo</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cliente in clientesFiltrados)
                            {
                                <tr>
                                    <td data-label="Código">@cliente.codigoCliente</td>
                                    <td data-label="Nombre">@cliente.nombre</td>
                                    <td data-label="Apellido">@cliente.apellido</td>
                                    <td data-label="Cédula">@cliente.cedula</td>
                                    <td data-label="Tipo"><span class="badge-tipo @cliente.tipoCliente.ToLower()">@cliente.tipoCliente</span></td>
                                    <td class="acciones" data-label="Acciones">
                                        <button class="btn-editar" @onclick="() => EditarCliente(cliente)" title="Editar">
                                            <i class="icono-editar"></i>
                                        </button>
                                        <button class="btn-eliminar" @onclick="() => EliminarCliente(cliente.codigoCliente)" title="Eliminar">
                                            <i class="icono-eliminar"></i>
                                        </button>
                                        <button class="btn-detalle" @onclick="() => VerDetalle(cliente)" title="Ver detalles">
                                            <i class="icono-detalle"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="sin-resultados">
                        <i class="icono-cliente"></i>
                        <p>No se encontraron clientes</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>




@code {
    List<Cliente> clientes = new();
    List<Cliente> clientesFiltrados = new();
    Cliente nuevoCliente = new();
    string filtroBusqueda = "";
    bool modoEditar = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
    }

    protected override void OnParametersSet()
    {
        FiltrarClientes();
    }

    async Task CargarClientes()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Cliente>>("api/Cliente/GetAllClientes");
            if (response is not null)
            {
                clientes = response;
                FiltrarClientes();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar clientes: " + ex.Message);
        }
    }

    void FiltrarClientes()
    {
        if (string.IsNullOrWhiteSpace(filtroBusqueda))
        {
            clientesFiltrados = clientes.ToList();
        }
        else
        {
            var termino = filtroBusqueda.ToLower();
            clientesFiltrados = clientes.Where(c =>
                c.nombre.ToLower().Contains(termino) ||
                c.apellido.ToLower().Contains(termino) ||
                c.cedula.ToLower().Contains(termino) ||
                c.codigoCliente.ToString().Contains(termino) ||
                c.tipoCliente.ToLower().Contains(termino)
            ).ToList();
        }
    }

    async Task GuardarCliente()
    {
        if (modoEditar)
        {
            var response = await Http.PutAsJsonAsync($"api/Cliente/ActualizarCliente/{nuevoCliente.codigoCliente}", nuevoCliente);
            if (response.IsSuccessStatusCode)
            {
                modoEditar = false;
                nuevoCliente = new();
                await CargarClientes();
            }
        }
        else
        {
            var response = await Http.PostAsJsonAsync("api/Cliente/AgregarCliente", nuevoCliente);
            if (response.IsSuccessStatusCode)
            {
                nuevoCliente = new();
                await CargarClientes();
            }
        }
    }

    void EditarCliente(Cliente cliente)
    {
        nuevoCliente = new Cliente
            {
                codigoCliente = cliente.codigoCliente,
                nombre = cliente.nombre,
                apellido = cliente.apellido,
                cedula = cliente.cedula,
                tipoCliente = cliente.tipoCliente,
                telefono = cliente.telefono,
                direccion = cliente.direccion,
                creado_por = cliente.creado_por
            };
        modoEditar = true;
    }

    void CancelarEdicion()
    {
        nuevoCliente = new();
        modoEditar = false;
    }

    async Task EliminarCliente(int codigoCliente)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Cliente/EliminarCliente/{codigoCliente}");

            if (response.IsSuccessStatusCode)
            {
                await CargarClientes();
                // Mostrar mensaje de éxito
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                // Mostrar mensaje de error al usuario
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar cliente: {ex.Message}");
            // Mostrar mensaje de error al usuario
        }
    }

    void VerDetalle(Cliente cliente)
    {
        // Implementar lógica para mostrar detalles del cliente
        // Puede ser un modal o una página separada
    }

    public class Cliente
    {
        public int codigoCliente { get; set; }
        public string cedula { get; set; } = string.Empty;
        public string nombre { get; set; } = string.Empty;
        public string apellido { get; set; } = string.Empty;
        public string tipoCliente { get; set; } = string.Empty;
        public string telefono { get; set; } = string.Empty;
        public string direccion { get; set; } = string.Empty;
        public int creado_por { get; set; }
    }
}

<style>
    /* Estilos base optimizados para móvil */
    .gestor-clientes {
        font-family: 'Segoe UI', Roboto, Arial, sans-serif;
        padding: 10px;
        background-color: #f5f7fa;
        min-height: 100vh;
        box-sizing: border-box;
        -webkit-text-size-adjust: 100%;
    }

    .titulo-principal {
        color: #1A2E5A;
        margin-bottom: 15px;
        font-weight: 600;
        border-bottom: 2px solid #E30613;
        padding-bottom: 6px;
        display: inline-block;
        font-size: 1.3rem;
    }

    .contenedor-principal {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .panel-lista, .panel-formulario {
        width: 100%;
        background: white;
        border-radius: 6px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .encabezado-panel {
        background-color: #1A2E5A;
        color: white;
        padding: 12px 15px;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

        .encabezado-panel h4 {
            margin: 0;
            font-weight: 500;
            font-size: 1.1rem;
        }

    .busqueda {
        position: relative;
        width: 100%;
    }

        .busqueda input {
            width: 100%;
            padding: 10px 30px 10px 12px;
            border-radius: 4px;
            border: none;
            font-size: 14px;
            box-sizing: border-box;
            min-height: 44px;
            -webkit-appearance: none;
        }

    .icono-buscar {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        width: 16px;
        height: 16px;
    }

    .contenedor-tabla {
        padding: 10px;
        max-height: 500px;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
    }

    .formulario {
        padding: 15px;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 10px;
    }

    .grupo-formulario {
        margin-bottom: 12px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: #1A2E5A;
        font-size: 14px;
    }

    input, select {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
        box-sizing: border-box;
        min-height: 44px;
        -webkit-appearance: none;
    }

    .acciones-formulario {
        display: flex;
        gap: 8px;
        margin-top: 15px;
    }

    /* Tabla optimizada para móvil */
    table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
    }

    th {
        background-color: #f8f9fa;
        color: #1A2E5A;
        padding: 12px 8px;
        text-align: left;
        font-weight: 600;
        border-bottom: 2px solid #e9ecef;
        position: sticky;
        top: 0;
    }

    td {
        padding: 12px 8px;
        border-bottom: 1px solid #e9ecef;
        color: #495057;
        word-break: break-word;
    }

    .badge-tipo {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
    }

        .badge-tipo.regular {
            background-color: #6c757d;
            color: white;
        }

        .badge-tipo.vip {
            background-color: #E30613;
            color: white;
        }

        .badge-tipo.mayorista {
            background-color: #1A2E5A;
            color: white;
        }

    .acciones {
        display: flex;
        gap: 5px;
        flex-wrap: nowrap;
    }

        .acciones button {
            border: none;
            background: none;
            cursor: pointer;
            padding: 5px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 36px;
            min-height: 36px;
        }

    .btn-editar {
        color: #1A2E5A;
    }

        .btn-editar:hover {
            background-color: rgba(26, 46, 90, 0.1);
        }

    .btn-eliminar {
        color: #E30613;
    }

        .btn-eliminar:hover {
            background-color: rgba(227, 6, 19, 0.1);
        }

    .btn-detalle {
        color: #4a7856;
    }

        .btn-detalle:hover {
            background-color: rgba(74, 120, 86, 0.1);
        }

    .icono-editar, .icono-eliminar, .icono-detalle {
        display: inline-block;
        width: 18px;
        height: 18px;
        background-size: contain;
        background-repeat: no-repeat;
    }

    .sin-resultados {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 30px 0;
        color: #6c757d;
    }

    .icono-cliente {
        width: 40px;
        height: 40px;
        margin-bottom: 10px;
    }

    /* Botones optimizados */
    .btn-guardar, .btn-cancelar {
        padding: 10px 15px;
        font-size: 14px;
        border: none;
        border-radius: 4px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 6px;
        min-height: 44px;
    }

    .btn-guardar {
        background-color: #1A2E5A;
        color: white;
    }

        .btn-guardar:hover {
            background-color: #142445;
        }

    .btn-cancelar {
        background-color: #6c757d;
        color: white;
    }

        .btn-cancelar:hover {
            background-color: #5a6268;
        }

    .icono-guardar, .icono-cancelar {
        display: inline-block;
        width: 16px;
        height: 16px;
        background-size: contain;
        background-repeat: no-repeat;
    }

    /* Media queries para pantallas más grandes */
    @@media (min-width: 600px) {
        .form-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @@media (min-width: 768px) {
        .contenedor-principal {
            flex-direction: row;
        }

        .panel-formulario {
            flex: 0 0 400px;
        }

        .panel-lista {
            flex: 1;
        }
    }

    @@media (min-width: 992px) {
        .form-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    /* Estilos para tabla en móviles */
    @@media (max-width: 600px) {
        table, thead, tbody, th, td, tr {
            display: block;
        }

            thead tr {
                position: absolute;
                top: -9999px;
                left: -9999px;
            }

        tr {
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        td {
            border: none;
            border-bottom: 1px solid #eee;
            position: relative;
            padding-left: 50%;
        }

            td:before {
                position: absolute;
                left: 8px;
                width: 45%;
                padding-right: 10px;
                white-space: nowrap;
                content: attr(data-label);
                font-weight: bold;
                color: #1A2E5A;
            }

        .acciones {
            justify-content: flex-end;
            padding-left: 0;
        }

            .acciones:before {
                content: none;
            }
    }

    /* Iconos SVG embebidos */
    .icono-buscar {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%231A2E5A'%3E%3Cpath d='M15.5 14h-.79l-.28-.27a6.5 6.5 0 0 0 1.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.505 6.505 0 0 0-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 0 0 5.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3C/svg%3E");
    }

    .icono-editar {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%231A2E5A'%3E%3Cpath d='M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z'/%3E%3C/svg%3E");
    }

    .icono-eliminar {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23E30613'%3E%3Cpath d='M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z'/%3E%3C/svg%3E");
    }

    .icono-detalle {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%234a7856'%3E%3Cpath d='M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z'/%3E%3C/svg%3E");
    }

    .icono-cliente {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%236c757d'%3E%3Cpath d='M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z'/%3E%3C/svg%3E");
    }

    .icono-guardar {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z'/%3E%3C/svg%3E");
    }

    .icono-cancelar {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'/%3E%3C/svg%3E");
    }
</style>